Exec: dockbuild.sh pymongo jq ejsonschema pdrtest pdrangular
   started at Wed May 23 14:54:01 EDT 2018
+  docker build --build-arg=devuid=56864 -t oar-metadata/pymongo pymongo
Sending build context to Docker daemon  6.656kB
Step 1/6 : FROM mongo:3.2.9
 ---> c6d2bbc1f992
Step 2/6 : MAINTAINER Ray Plante <raymond.plante@nist.gov>
 ---> Using cache
 ---> 23b4f26f952c
Step 3/6 : COPY mongod.conf /etc/mongod.conf
 ---> Using cache
 ---> f44b8044cf99
Step 4/6 : COPY mongod_ctl.sh /usr/local/bin
 ---> Using cache
 ---> 634aff255358
Step 5/6 : RUN apt-get update && apt-get install -y python python-pip python-dev
 ---> Using cache
 ---> b502574cd262
Step 6/6 : RUN pip install pymongo
 ---> Using cache
 ---> 4b7c988faeda
[Warning] One or more build-args [devuid] were not consumed
Successfully built 4b7c988faeda
Successfully tagged oar-metadata/pymongo:latest
+  docker build --build-arg=devuid=56864 -t oar-metadata/jq jq
Sending build context to Docker daemon  3.072kB
Step 1/7 : From oar-metadata/pymongo
 ---> 4b7c988faeda
Step 2/7 : RUN apt-get update &&     apt-get install -y curl
 ---> Using cache
 ---> 337ad13264c3
Step 3/7 : WORKDIR /root
 ---> Using cache
 ---> 2dbe3040d64c
Step 4/7 : COPY jq.sha256 .
 ---> Using cache
 ---> cfdd4e33cd07
Step 5/7 : RUN curl -L -o jq-linux64     https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 &&     sha256sum -c jq.sha256
 ---> Using cache
 ---> 3c7a6cea358c
Step 6/7 : RUN chmod a+x jq-linux64 && cp jq-linux64 /usr/local/bin/jq
 ---> Using cache
 ---> a774df12f6e0
Step 7/7 : CMD ["bash"]
 ---> Using cache
 ---> 40f1ad67720c
[Warning] One or more build-args [devuid] were not consumed
Successfully built 40f1ad67720c
Successfully tagged oar-metadata/jq:latest
+  docker build --build-arg=devuid=56864 -t oar-metadata/ejsonschema ejsonschema
Sending build context to Docker daemon  2.048kB
Step 1/6 : FROM oar-metadata/jq:latest
 ---> 40f1ad67720c
Step 2/6 : RUN apt-get update && apt-get install -y python python-pip python-dev unzip                                          uwsgi uwsgi-plugin-python python-yaml
 ---> Using cache
 ---> ba3088b52fce
Step 3/6 : RUN pip install json-spec jsonmerge==1.3.0 jsonschema requests pynoid pytest filelock
 ---> Using cache
 ---> 7c06c3d76e9d
Step 4/6 : WORKDIR /root
 ---> Using cache
 ---> 571295863a8b
Step 5/6 : RUN curl -L -o ejsonschema.zip     https://github.com/usnistgov/ejsonschema/archive/master.zip &&     unzip ejsonschema.zip &&     cd ejsonschema-master &&     python setup.py install
 ---> Using cache
 ---> 1033b22e07d3
Step 6/6 : CMD ["bash"]
 ---> Using cache
 ---> 558379a47f21
[Warning] One or more build-args [devuid] were not consumed
Successfully built 558379a47f21
Successfully tagged oar-metadata/ejsonschema:latest
+  docker build --build-arg=devuid=56864 -t oar-pdr/pdrtest pdrtest
Sending build context to Docker daemon  12.29kB
Step 1/22 : FROM oar-metadata/ejsonschema
 ---> 558379a47f21
Step 2/22 : RUN apt-get update && apt-get install -y python-yaml nginx curl wget less sudo                                          uwsgi uwsgi-plugin-python zip                                          p7zip-full git
 ---> Using cache
 ---> 2e656813044a
Step 3/22 : ENV GOSU_VERSION 1.10
 ---> Using cache
 ---> 800e69a42067
Step 4/22 : RUN set -ex;     arch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";     wget -O /usr/local/bin/gosu    "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$arch";     wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$arch.asc";    export GNUPGHOME="$(mktemp -d)";     gpg --keyserver ha.pool.sks-keyservers.net          --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;     gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;     rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;     chmod +x /usr/local/bin/gosu;     gosu nobody true
 ---> Using cache
 ---> cbca3bcfccef
Step 5/22 : RUN sed --in-place -e '/CREATE_MAIL_SPOOL/ s/=yes/=no/' /etc/default/useradd
 ---> Using cache
 ---> dd893e0a20c7
Step 6/22 : ARG devuser=developer
 ---> Using cache
 ---> 0a6dd394b9c3
Step 7/22 : ARG devuid=1000
 ---> Using cache
 ---> 8fa6d1ea1642
Step 8/22 : RUN grep -qs :${devuid}: /etc/group ||     groupadd --gid $devuid $devuser
 ---> Using cache
 ---> 277e03e7c25f
Step 9/22 : RUN grep -Pqs ":${devuid}:\d+:" /etc/passwd ||     useradd -m --comment "OAR Developer" --shell /bin/bash             --gid $devuid --uid $devuid $devuser
 ---> Using cache
 ---> 218a1ed8f7b5
Step 10/22 : RUN echo $devuser "ALL=(ALL)" NOPASSWD:ALL > /etc/sudoers.d/90-developers
 ---> Using cache
 ---> 5cc4b7d5bcb2
Step 11/22 : RUN pip install Detach
 ---> Using cache
 ---> 150286fbf171
Step 12/22 : COPY entrypoint.sh /usr/local/bin/entrypoint.sh
 ---> Using cache
 ---> 6f6fc9895de5
Step 13/22 : RUN chmod a+rx /usr/local/bin/entrypoint.sh
 ---> Using cache
 ---> 2b64999e3bce
Step 14/22 : COPY nginx.conf /etc/nginx/nginx.conf
 ---> Using cache
 ---> 9fc102eec782
Step 15/22 : RUN chmod a+r /etc/nginx/nginx.conf
 ---> Using cache
 ---> f6f5661a2c32
Step 16/22 : VOLUME /dev/oar-pdr
 ---> Using cache
 ---> 2ecddecd7a20
Step 17/22 : VOLUME /app/dist
 ---> Using cache
 ---> d86afa2b526a
Step 18/22 : RUN mkdir -p /dev/oar-pdr /app && chmod a+rwx /app
 ---> Using cache
 ---> aea924ba0cb9
Step 19/22 : WORKDIR /dev/oar-pdr
 ---> Using cache
 ---> cc785b355fcc
Step 20/22 : ENV PYTHONPATH /dev/oar-pdr/python/build/
 ---> Using cache
 ---> 961a3c4e4f0a
Step 21/22 : USER $devuser
 ---> Using cache
 ---> f26d356e3fd9
Step 22/22 : ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
 ---> Using cache
 ---> e09d9897cd1e
Successfully built e09d9897cd1e
Successfully tagged oar-pdr/pdrtest:latest
